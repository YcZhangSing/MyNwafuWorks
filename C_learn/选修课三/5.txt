#include<bits/stdc++.h>
using namespace std;

stack<int> ListX;
stack<int> ListY;
int f_x,f_y,e_x,e_y;
int wheel[8][2]={{0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1},{-1,0},{1,-1}};
int mg[100][100];

bool dfs(int x,int y,int from,int n)
{
    ListX.push(x);
    ListY.push(y);
    if(x==e_x && y==e_y)    
        return true;
    for(int i=0;i<8;i++)
    {
        if(x+wheel[i][0]>=n || y+wheel[i][1]>=n) ;
        else if(mg[x+wheel[i][0]][y+wheel[i][1]]==1) ;
        else 
        {   mg[x][y]=1;
            if(dfs(x+wheel[i][0],y+wheel[i][1],i,n))
                return true;
        }
    }
    ListX.pop();
    ListY.pop();
    return false;
}
int main()
{
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            cin>>mg[i][j];
    cin>>f_x>>f_y>>e_x>>e_y;
    int from=4;
    dfs(f_x,f_y,from,n);
    while(!ListX.empty())
    {
        cout<<ListX.top()<<" "<<ListY.top()<<";";
        ListX.pop();
        ListY.pop();
    }
    cout<<endl;
    return 0;
}