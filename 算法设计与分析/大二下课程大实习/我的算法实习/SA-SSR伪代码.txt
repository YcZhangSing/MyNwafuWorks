function SA-IS(S):
    t = bool[]               		//标记后缀类型，L类型或者S类型
    S1 = int[]              			 //对LMS block重命名后生成的新串
    P = int[]               			 //LMS标记
    bucket = int[]      			//桶标记
    for i = S[S.lenth-1] to 0
    	t[i] = JudgeType(S,i)       	//倒序扫描sequence确定后缀类型
    for i = t[t.lenth-1] to 0
	P[i] = JudgeLMS(S,i)      	//扫描t数组确定所有的 LMS 子串 
				//对所有的 LMS 子串进行诱导排序
    IStoL(LMS) 			//先排L
    IStoS(LMS)			//再排序S
    S1=RnameLMS()			//对每一个 LMS 子串重新命名，生成新的串 S1
    if   dif(S1)			//S1 中的每一个字符都不一样:
        SA1 = getSA1()		//直接计算SA1
    else
        SA1 = SA-IS(S1)  		// 递归计算 SA1
    				//利用 SA1 来进行诱导排序，计算 SA
    IStoL(SA1) 			//先排L
    IStoS(SA1)			//再排序S
    return SA

for i = 0 to SA.lenth
	//如果是L类型
	if SA[i] !=null && SA[i]>0 && t[SA[i]-1] == L_type
	//从左向右依次放入SA的桶中
 		put  SA[i]-1  at the next free slot of the front of t[SA[i] -1]


for i = SA.lenth to 0
	//如果是S类型
	if SA[i] !=null && SA[i]>0 && t[SA[i]-1] == S_type
	//从右向左依次放入SA的桶中
 		put  SA[i]-1  at the next free slot of the end of t[SA[i] -1]


function getLCP():
		int h =0;//前一次计算的两个后缀的lcp
		LCP[1]=0;
		for i= 1 to sequence.lenth 
			int j = SA[rk[i]-1];
			if(h>0) h--;
			while j+h>=n ||  i+h>=n
			         if(sequence.charAt(j+h) != sequence.charAt(i+h)) break;
			        h++;
			
			LCP[rk[i]] = h;
		}


function getSSRbySA:
sequence = filetoString();
SA=SA-SSR();
LCP=getLCP();
for i = 1 to sequence.lenth
    		int k = Math.abs(SA[i]-SA[i-1]);
    		int r = Math.abs((int)LCP[i]/k);
    		p=Math.min(SA[i],SA[i-1]);
    		if(isgoodSSR(r,k))
	    		for j = 0 to sequence.lenth
	    			result+=sequence.charAt(p+j); 
PrinttoFile(result)

    	




