/* Generated By:JJTree&JavaCC: Do not edit this line. MyNewGrammar.java */
package miniC;
import Util.*;
import java.io.*;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants, MyNewGrammarConstants {/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();//定义一个QTList< >列表
  public QTList qtlist = new QTList();

  public SwitchHDL shdl = new SwitchHDL();

  //定义一个数组列表
  public ArrayMap arrmap = new ArrayMap();

  public VariableMap varmap = new VariableMap();

  //输出四元式
  public String printQTTable()
  {
    return qtlist.printQTTable();
  }

  //输出定义的符号表
  public String printCharTable()
  {
    String res = "\u005cnVariableTable:< VariableName, VariableType>";
    res += varmap.toString();
    return res;
  }

  public static void main(String args [])
  {
    System.out.println("Reading from file input...");
    String inputpath = "src/miniC/test_switchcase";
    String outputpath = "src/miniC/output";
    InputStream fin = null;
    FileWriter fw = null;
    try
    {
      fin = new FileInputStream(inputpath);
    }
    catch (FileNotFoundException e1)
    {
      // TODO 自动生成的 catch 块
      System.out.println("\uff01\uff01\uff01");
      e1.printStackTrace();
    }
    try
    {
      fw = new FileWriter(outputpath, true);
    }
    catch (IOException e1)
    {
      // TODO 自动生成的 catch 块
      System.out.println("\uff01\uff01\uff01");
      e1.printStackTrace();
    }
    PrintWriter pw = new PrintWriter(fw);
    pw.print(inputpath + "\u7684\u8bed\u6cd5\u5206\u6790\u7ed3\u679c\uff1a\u005cn");
    pw.flush();
    MyNewGrammar YF = new MyNewGrammar(fin);
    try
    {
      SimpleNode n = YF.Start();
      String res = n.dump("");
      //
      //System.out.println("返回的结果:\n" + res);
      //
      res += "\u005cn\u56db\u5143\u5f0f\u5982\u4e0b:\u005cn";
      res += YF.printQTTable(); //四元式
      res += YF.printCharTable(); //变量符号表
      pw.print(res);
      pw.flush();
      pw.close();
      fin.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println("\u51fa\u9519\u4e86\u005cn" + e.getMessage());
    }
    System.out.println("Analysis done! Please check it in file output.");
  }

/////////////////////////////////////////////////////////语法语义分析//////////////////////////////////////////////////////////////////
  final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MAIN);
      jj_consume_token(LRBRACKET);
      jj_consume_token(RRBRACKET);
      jj_consume_token(LFBRACKET);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case INT:
        case RETURN:
        case WHILE:
        case CHAR:
        case FLOAT:
        case DOUBLE:
        case FOR:
        case SWITCH:
        case DO:
        case IDENTIFIER:
        case LFBRACKET:
        case 48:
        case 49:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        SentenceBlock();
      }
      jj_consume_token(RFBRACKET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void SentenceBlock() throws ParseException {
 /*@bgen(jjtree) SentenceBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case INT:
      case WHILE:
      case CHAR:
      case FLOAT:
      case DOUBLE:
      case FOR:
      case SWITCH:
      case DO:
      case IDENTIFIER:
      case 48:
      case 49:
        Sentence();
        break;
      case RETURN:
        Returnstatment();
        break;
      case LFBRACKET:
        jj_consume_token(LFBRACKET);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case INT:
          case RETURN:
          case WHILE:
          case CHAR:
          case FLOAT:
          case DOUBLE:
          case FOR:
          case SWITCH:
          case DO:
          case IDENTIFIER:
          case LFBRACKET:
          case 48:
          case 49:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          SentenceBlock();
        }
        jj_consume_token(RFBRACKET);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Sentence() throws ParseException {
 /*@bgen(jjtree) Sentence */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case CHAR:
      case FLOAT:
      case DOUBLE:
      case SWITCH:
      case IDENTIFIER:
      case 48:
      case 49:
        shunxu();
        break;
      case IF:
        tiaojianyuju();
        break;
      case WHILE:
      case FOR:
      case DO:
        xunhuan();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void shunxu() throws ParseException {
 /*@bgen(jjtree) shunxu */
  SimpleNode jjtn000 = new SimpleNode(JJTSHUNXU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case CHAR:
      case FLOAT:
      case DOUBLE:
      case IDENTIFIER:
      case 48:
      case 49:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case CHAR:
        case FLOAT:
        case DOUBLE:
          shengming();
          break;
        case IDENTIFIER:
        case 48:
        case 49:
          if (jj_2_1(2)) {
            fuzhi();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 48:
            case 49:
              zizeng();
              break;
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEM);
        break;
      case SWITCH:
        SwitchCase();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void shengming() throws ParseException {
 /*@bgen(jjtree) shengming */
  SimpleNode jjtn000 = new SimpleNode(JJTSHENGMING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String arg1 = null;
  String result = null;
  String raw = ""+ 1;
  String col = ""+ 1;
  Token type = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        type = jj_consume_token(INT);
        break;
      case DOUBLE:
        type = jj_consume_token(DOUBLE);
        break;
      case FLOAT:
        type = jj_consume_token(FLOAT);
        break;
      case CHAR:
        type = jj_consume_token(CHAR);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      result = Identifier();
    if (varmap.Variablecontains(result))
    {
      System.out.println("ERR! The Variable," + result + ", has already been defined and you CAN NOT declare it again...");
    }
    else
    {
      varmap.addVariable(type.image, result);
      //加入符号表
    }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
      case EQUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          arg1 = biaodashi();
        QTInfo qt0 = new QTInfo("=", arg1, "_", result);
        qtlist.addQTInfo(qt0);
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
        varmap.setarr(result, 1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            col = Integer();
            break;
          case IDENTIFIER:
            col = Identifier();
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            jj_consume_token(LBRACKET);
          varmap.setarr(result, 2);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              raw = Integer();
              break;
            case IDENTIFIER:
              raw = Identifier();
              break;
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(RBRACKET);
            break;
          default:
            jj_la1[11] = jj_gen;
            ;
          }
        arrmap.createArray(result, raw, col);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        result = Identifier();
        {
    if (varmap.Variablecontains(result))
    {
      System.out.println("ERR! The Variable," + result + ", has already been defined and you CAN NOT declare it again...");
    }
    else
    {
      varmap.addVariable(type.image, result);
      //加入符号表
    }
  }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
        case EQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EQUAL:
            jj_consume_token(EQUAL);
            arg1 = biaodashi();
          QTInfo qt = new QTInfo("=", arg1, "_", result);
          qtlist.addQTInfo(qt);
            break;
          case LBRACKET:
            jj_consume_token(LBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              col = Integer();
              break;
            case IDENTIFIER:
              col = Identifier();
              break;
            default:
              jj_la1[15] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(RBRACKET);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              jj_consume_token(LBRACKET);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INTEGER_LITERAL:
                raw = Integer();
                break;
              case IDENTIFIER:
                raw = Identifier();
                break;
              default:
                jj_la1[16] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(RBRACKET);
              break;
            default:
              jj_la1[17] = jj_gen;
              ;
            }
          if (!arrmap.createArray(result, raw, col))
          {
            System.out.println("\u91cd\u590d\u5b9a\u4e49");
            {if (true) throw new Exception();}
          }
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void fuzhi() throws ParseException {
 /*@bgen(jjtree) fuzhi */
  SimpleNode jjtn000 = new SimpleNode(JJTFUZHI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String arg1 = null;
  String result = null;
  String Temp = null;
  String arrname = null;
  String T1 = null;
  String T2 = null;
  String T3 = null;
  String acol = ""+ 1;
  String araw = ""+ 1;
  String col = ""+ 1;
  String raw = ""+ 1;
    try {
      // result = expression
      result = Identifier();
                    if (!(varmap.Variablecontains(result)))
                    {
                      System.out.println("?ERR! The Variable," + result + ", has NOT been defined, it CAN NOT be used as the left value...");
                    }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
                      acol = arrmap.getcol(result);
                      araw = arrmap.getraw(result); //获取数组的大小（这里是横向存储的数组）

        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          col = Integer();
          break;
        case IDENTIFIER:
          col = Identifier();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RBRACKET);
                      QTInfo cqt1 = new QTInfo("j<", col, acol, "OutBounds");
                      QTInfo cqt2 = new QTInfo("j>", col, "0", "OutBounds");
                      qtlist.addQTInfo(cqt1);
                      qtlist.addQTInfo(cqt2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            raw = Integer();
            break;
          case IDENTIFIER:
            raw = Identifier();
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RBRACKET);
                        QTInfo rqt1 = new QTInfo("j<", raw, araw, "OutBounds");
                        QTInfo rqt2 = new QTInfo("j>", raw, "0", "OutBounds");
                        qtlist.addQTInfo(rqt1);
                        qtlist.addQTInfo(rqt2);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
                      System.out.println("\u5230\u6b64\uff01" + result);
        jj_consume_token(EQUAL);
        arg1 = biaodashi();
                      if (!arrmap.containsKey(result))
                      {
                        System.out.println("\u6570\u7ec4\u672a\u5b9a\u4e49");
                        {if (true) throw new NoSuchFieldException("\u6570\u7ec4\u672a\u5b9a\u4e49\uff01");}
                      }
                      T1 = VariableNameGenerator.genVariableName();
                      T2 = VariableNameGenerator.genVariableName();
                      T3 = VariableNameGenerator.genVariableName();
                      QTInfo qt1 = new QTInfo("*", col, acol, T1);
                      QTInfo qt2 = new QTInfo("+", raw, T1, T1);
                      Temp = String.valueOf(Integer.parseInt(acol) + 1);
                      QTInfo qt3 = new QTInfo("-", result, Temp, T2);
                      QTInfo qt4 = new QTInfo("[]=", arg1, "-", T2 + "[" + T1 + "]");
                      qtlist.addQTInfo(qt1);
                      qtlist.addQTInfo(qt2);
                      qtlist.addQTInfo(qt3);
                      qtlist.addQTInfo(qt4);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case 48:
      case 49:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          if (jj_2_2(2)) {
            //将数组的值赋给标识符“ a = b[1][2]
                            arrname = Identifier();
            jj_consume_token(LBRACKET);
            acol = arrmap.getcol(arrname);
            araw = arrmap.getraw(arrname); //获取数组的大小（这里是横向存储的数组）

            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              col = Integer();
              break;
            case IDENTIFIER:
              col = Identifier();
              break;
            default:
              jj_la1[24] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(RBRACKET);
            QTInfo cqt1 = new QTInfo("j<", col, acol, "OutBounds");
            QTInfo cqt2 = new QTInfo("j>", col, "0", "OutBounds");
            qtlist.addQTInfo(cqt1);
            qtlist.addQTInfo(cqt2);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              jj_consume_token(LBRACKET);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INTEGER_LITERAL:
                raw = Integer();
                break;
              case IDENTIFIER:
                raw = Identifier();
                break;
              default:
                jj_la1[25] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              jj_consume_token(RBRACKET);
              QTInfo rqt1 = new QTInfo("j<", raw, araw, "OutBounds");
              QTInfo rqt2 = new QTInfo("j>", raw, "0", "OutBounds");
              qtlist.addQTInfo(rqt1);
              qtlist.addQTInfo(rqt2);
              break;
            default:
              jj_la1[26] = jj_gen;
              ;
            }
            if (!arrmap.containsKey(arrname))
            {
              System.out.println("\u6570\u7ec4\u672a\u5b9a\u4e49");
              {if (true) throw new NoSuchFieldException("\u6570\u7ec4\u672a\u5b9a\u4e49\uff01");}
            }
            System.out.println("case 1");
            T1 = VariableNameGenerator.genVariableName();
            QTInfo qt1 = new QTInfo("*", col, acol, T1);
            T2 = VariableNameGenerator.genVariableName();
            T3 = VariableNameGenerator.genVariableName();
            QTInfo qt2 = new QTInfo("+", raw, T1, T1);
            Temp = String.valueOf(Integer.parseInt(acol) + 1);
            QTInfo qt3 = new QTInfo("-", arrname, Temp, T2);
            QTInfo qt4 = new QTInfo("=[]", T2 + "[" + T1 + "]", "-", T3);
            QTInfo qt5 = new QTInfo("=", T3, "-", result); //
            qtlist.addQTInfo(qt1);
            qtlist.addQTInfo(qt2);
            qtlist.addQTInfo(qt3);
            qtlist.addQTInfo(qt4);
            qtlist.addQTInfo(qt5);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
            case IDENTIFIER:
            case LRBRACKET:
            case FLOAT_LITERAL:
              arg1 = biaodashi();
            QTInfo qt = new QTInfo("=", arg1, "_", result);
            qtlist.addQTInfo(qt);
              break;
            default:
              jj_la1[27] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        case 48:
          jj_consume_token(48);
        /*
      	("+",i,1,T1)
      	("=",T1,_,i)
      */
        Temp = VariableNameGenerator.genVariableName();
        QTInfo qt01 = new QTInfo("+", result, "1", Temp);
        QTInfo qt02 = new QTInfo("=", Temp, "_", result);
        qtlist.addQTInfo(qt01);
        qtlist.addQTInfo(qt02);
          break;
        case 49:
          jj_consume_token(49);
        /*
      	("-",i,1,T1)
      	("=",T1,_,i)
      */
        Temp = VariableNameGenerator.genVariableName();
        QTInfo qt00 = new QTInfo("-", result, "1", Temp);
        QTInfo qt11 = new QTInfo("=", Temp, "_", result);
        qtlist.addQTInfo(qt00);
        qtlist.addQTInfo(qt11);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void zizeng() throws ParseException {
 /*@bgen(jjtree) zizeng */
  SimpleNode jjtn000 = new SimpleNode(JJTZIZENG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String x = null;
  String Temp = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        x = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      /*
      	("+",i,1,T1)
      	("=",T1,_,i)
      */
      Temp = VariableNameGenerator.genVariableName();
      QTInfo qt01 = new QTInfo("+", x, "1", Temp);
      QTInfo qt02 = new QTInfo("=", Temp, "_", x);
      qtlist.addQTInfo(qt01);
      qtlist.addQTInfo(qt02);
        break;
      case 49:
        jj_consume_token(49);
        x = Identifier();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      /*
      	("-",i,1,T1)
      	("=",T1,_,i)
      */
      Temp = VariableNameGenerator.genVariableName();
      QTInfo qt0 = new QTInfo("-", x, "1", Temp);
      QTInfo qt1 = new QTInfo("=", Temp, "_", x);
      qtlist.addQTInfo(qt0);
      qtlist.addQTInfo(qt1);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void tiaojianyuju() throws ParseException {
 /*@bgen(jjtree) tiaojianyuju */
  SimpleNode jjtn000 = new SimpleNode(JJTTIAOJIANYUJU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cv = null;
  Token t = null;
  int index = 0;
    try {
      jj_consume_token(IF);
      jj_consume_token(LRBRACKET);
      cv = Boolean();
      jj_consume_token(RRBRACKET);
    cv.backpatchTrueChain(QTInfo.size + 1);
      SentenceBlock();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        /*防止if else 嵌套导致的冲突*/
            t = jj_consume_token(ELSE);
      QTInfo qt = new QTInfo("J", "-", "-", "-");
      qtlist.addQTInfo(qt);
      index = QTInfo.size;
      cv.backpatchFalseChain(index + 1);
        SentenceBlock();
        qtlist.setResultbyIndex(index, QTInfo.size);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (t == null)
    {
      cv.backpatchFalseChain(QTInfo.size + 1);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void xunhuan() throws ParseException {
 /*@bgen(jjtree) xunhuan */
  SimpleNode jjtn000 = new SimpleNode(JJTXUNHUAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int index = 0;
  ConditionValue cValue = new ConditionValue();
  String result = null;
  String arg1 = null;
  int indexE2 = 0;
  int indexE3 = 0;
  Token test=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LRBRACKET);
      index = QTInfo.size + 1; //记录进入while循环的四元式位置

        cValue = Boolean();
        jj_consume_token(RRBRACKET);
      cValue.backpatchTrueChain(QTInfo.size + 1);
        SentenceBlock();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      QTInfo qt = new QTInfo("j", "_", "_", index);
      qtlist.addQTInfo(qt);
      /*假出口在此，while条件为假后就应该跳出while循环了，所以，此时QTInfo.size+1就是假出口的四元式编号了*/
      cValue.backpatchFalseChain(QTInfo.size + 1);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LRBRACKET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            test = jj_consume_token(INT);
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
          result = Identifier();
          if(test!=null)
          {
            varmap.addVariable("int", result);
          }
          if (test == null && !(varmap.Variablecontains(result)))
          {
            System.out.println("ERR! The Variable," + result + ", has NOT been defined...");
          }
          jj_consume_token(EQUAL);
          arg1 = biaodashi();
          QTInfo qt0 = new QTInfo("=", arg1, "_", result);
          qtlist.addQTInfo(qt0);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(SEM);
      indexE2 = QTInfo.size + 1;
        cValue = Boolean();
        jj_consume_token(SEM);
      indexE3 = QTInfo.size + 1; //记录E3的位置

        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
        case 49:
          zizeng();
          break;
        case IDENTIFIER:
          fuzhi();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      //扫描完E3要跳回E2
      QTInfo qtE2 = new QTInfo("j", "_", "_", indexE2);
      qtlist.addQTInfo(qtE2);
        jj_consume_token(RRBRACKET);
      index = QTInfo.size + 1;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LFBRACKET:
          jj_consume_token(LFBRACKET);
          /*扫描完 { 就知道for循环的真出口在下一句了，回填biaodashi的cValue的真出口*/
          cValue.backpatchTrueChain(QTInfo.size + 1);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case INT:
          case RETURN:
          case WHILE:
          case CHAR:
          case FLOAT:
          case DOUBLE:
          case FOR:
          case SWITCH:
          case DO:
          case IDENTIFIER:
          case LFBRACKET:
          case 48:
          case 49:
            SentenceBlock();
            break;
          default:
            jj_la1[35] = jj_gen;
            ;
          }
          /*扫描完Senten之后要产生无条件跳转语句，跳转到E3处*/
          QTInfo qtE3 = new QTInfo("j", "_", "_", indexE3);
          qtlist.addQTInfo(qtE3);
          jj_consume_token(RFBRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          /*扫描完 }就知道for循环的假出口在下一句了，回填biaodashi的cValue的假出口*/
          cValue.backpatchFalseChain(QTInfo.size + 1);
          break;
        case SEM:
          jj_consume_token(SEM);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          /*扫描完 ； 就知道for循环的真出口在E3了，回填biaodashi的cValue的真出口*/
          cValue.backpatchTrueChain(indexE3);
          cValue.backpatchFalseChain(QTInfo.size + 1);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case DO:
        jj_consume_token(DO);
        jj_consume_token(LFBRACKET);
      index = QTInfo.size + 1;
        SentenceBlock();
        jj_consume_token(RFBRACKET);
        jj_consume_token(WHILE);
        jj_consume_token(LRBRACKET);
        cValue = Boolean();
        jj_consume_token(RRBRACKET);
        jj_consume_token(SEM);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      cValue.backpatchTrueChain(index);
      cValue.backpatchFalseChain(QTInfo.size + 1);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
布尔表达式的实现
布尔表达式中有四种运算符，关系符、与、或、非
> < >= <= != == && || !
为了实现上述复杂的布尔表达式的翻译，定义了三个语法语义程序
BaiscBoolean():最简单的布尔表达式即包含非操作的条件表达式
YuBoolean():与&&结合起来的布尔表达式，由BasicBoolen()+&&组成
Boolean():或||结合起来的布尔表达式，由YuBoolean()+||组成
因为运算优先级 rop >! >&& >||
所以Boolean()即是最后可以匹配布尔表达式是语法
*/
  final public ConditionValue tiaojian() throws ParseException {
 /*@bgen(jjtree) tiaojian */
  SimpleNode jjtn000 = new SimpleNode(JJTTIAOJIAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String e1 = null;
  String e2 = null;
  String r = null;
  ConditionValue cValue = new ConditionValue();
    try {
      e1 = biaodashi();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
      case GREATERTHAN:
      case EQUAL:
      case 51:
      case 52:
      case 53:
      case 54:
        r = guanxifu();
        e2 = biaodashi();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    if (r == null) /*只有表达式(jnz,e1,-,T)*/
    {
      QTInfo qt1 = new QTInfo("jnz", e1, "_", "T");
      qtlist.addQTInfo(qt1);
      cValue.mergeTrue(qt1);
    }
    else /*(j+r,e1,e2,T)*/
    {
      QTInfo qt = new QTInfo("j" + r, e1, e2, "T");
      qtlist.addQTInfo(qt);
      cValue.mergeTrue(qt);
    }
    /*无论如何都有一个假四元式(j,-,-,F)*/
    QTInfo qt = new QTInfo("j", "_", "_", "F");
    qtlist.addQTInfo(qt);
    cValue.mergeFalse(qt);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return cValue;} /*条件语句要返回一个条件语句的值ConditionValue*/

    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue BasicBoolean() throws ParseException {
 /*@bgen(jjtree) BasicBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBASICBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cv = new ConditionValue();
  ConditionValue cvt = null;
  Token test = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FEI:
        test = jj_consume_token(FEI);
        jj_consume_token(LRBRACKET);
        cvt = tiaojian();
        jj_consume_token(RRBRACKET);
        break;
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LRBRACKET:
      case FLOAT_LITERAL:
        cvt = tiaojian();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    if (test == null)
    {
      cv.mergeFalse(cvt);
      cv.mergeTrue(cvt);
    }
    else //有 ！ 号，要采用不同的操作merge真假串
    {
      cv.FEImerge(cvt);
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return cv;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue YuBoolean() throws ParseException {
 /*@bgen(jjtree) YuBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTYUBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cv3 = new ConditionValue(); //CV3代表整个表达式
  ConditionValue cv2 = null;
  ConditionValue cv1 = null;
  Token test = null;
    try {
      cv1 = BasicBoolean();
    cv3.mergeFalse(cv1); //cv1的假出口即cv3的假出口

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YU:
        test = jj_consume_token(YU);
      cv1.backpatchTrueChain(QTInfo.size + 1); //E&&M 当E为真时，要哦继续计算M的真假，所以E的真出口在M处

        cv2 = YuBoolean();
      cv3.mergeFalse(cv2);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    if (cv2 == null) //如果没有YU
    {
      cv3 = cv1; //直接返回CV1即可
    }
    else
    {
      cv3.mergeTrue(cv2); //cv2的真链merge到cv3中
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return cv3;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ConditionValue Boolean() throws ParseException {
 /*@bgen(jjtree) Boolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ConditionValue cv1 = null; //第一个简单布尔表达式
  ConditionValue cv2 = null; // ||号后面的布尔表达式  
  ConditionValue cv3 = new ConditionValue(); //整个YuBoolean表达式的condationvalue的值
  Token test = null;
    try {
      cv1 = YuBoolean();
    cv3.mergeTrue(cv1); // E || M, E为真则整个表达式的值为真

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HUO:
        test = jj_consume_token(HUO);
      cv1.backpatchFalseChain(QTInfo.size + 1);//回填 假 出口

        cv2 = Boolean();
      cv3.mergeTrue(cv2);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    if (test == null)
    {
      cv3 = cv1;
    }
    else
    {
      cv3.mergeFalse(cv2);
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return cv3;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
switch-case

switch(expression)
{
  case value1:
  		XXX;
  		break;
  case value2:
  		XXX;
  		break;
  default:
		XXX;
}

*/
  final public void SwitchCase() throws ParseException {
 /*@bgen(jjtree) SwitchCase */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCHCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t, t1;
  String ex = null;
  int index = 0;
    try {
      t = jj_consume_token(SWITCH);
      t = jj_consume_token(LRBRACKET);
      ex = Expression();
      t = jj_consume_token(RRBRACKET);
      t = jj_consume_token(LFBRACKET);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_4;
        }
        t = jj_consume_token(CASE);
        t1 = jj_consume_token(INTEGER_LITERAL);
        t = jj_consume_token(50);
      System.out.println("j==\u56db\u5143\u5f0f\u4ea7\u751f");
      QTInfo qt1 = new QTInfo("j==", ex, t1.image, QTInfo.size + 3);
      QTInfo qt2 = new QTInfo("j", "-", "-", "-");
      shdl.addIndex(QTInfo.size);
      //此时QTInfo.size是qt2的编号，将qt2的编号放入shdl（SwitchHDL）里面，便于后面回填
      System.out.println("addIndex\u586b\u4e86" + QTInfo.size);
      qtlist.addQTInfo(qt1);
      qtlist.addQTInfo(qt2);
        SentenceBlock();
      QTInfo qt3 = new QTInfo("j", "-", "-", "-");
      qtlist.addQTInfo(qt3);
      shdl.addOutIndex(QTInfo.size);
      }
      t = jj_consume_token(MINIDEFAULT);
      t = jj_consume_token(50);
      index = QTInfo.size + 1;
      //记录default执行语句的的开始地方

      SentenceBlock();
      shdl.SwitchDefaultBackPatch(index, QTInfo.size + 1, qtlist);
      //扫描完成default之后回填switchcase语句的出口
      shdl.clean();
      t = jj_consume_token(RFBRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String guanxifu() throws ParseException {
 /*@bgen(jjtree) guanxifu */
  SimpleNode jjtn000 = new SimpleNode(JJTGUANXIFU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        t = jj_consume_token(LESSTHAN);
        break;
      case GREATERTHAN:
        t = jj_consume_token(GREATERTHAN);
        break;
      case EQUAL:
        t = jj_consume_token(EQUAL);
        break;
      case 51:
        t = jj_consume_token(51);
        break;
      case 52:
        t = jj_consume_token(52);
        break;
      case 53:
        t = jj_consume_token(53);
        break;
      case 54:
        t = jj_consume_token(54);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//ConditionValue tiaojian() :
//{}
//{
//  biaodashi() guanxifu() biaodashi()
//}
  final public String biaodashi() throws ParseException {
 /*@bgen(jjtree) biaodashi */
  SimpleNode jjtn000 = new SimpleNode(JJTBIAODASHI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
    try {
      s = Expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
    try {
      s = AdditiveExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String a = null;
  String b = null;
  String res = null;
  Token t = null;
    try {
      a = MultiplicativeExpression();
    res = a;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case MINUS:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          t = jj_consume_token(ADD);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = MultiplicativeExpression();
      res = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(t.image, a, b, res);
      qtlist.addQTInfo(qt);
      a = res;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return res;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String a = null;
  String b = null;
  String res = null;
  Token t = null;
    try {
      a = UnaryExpression();
    res = a; /*如果只有UnaryExpression()而没有后面的()*,这时候返回的String值是单目运算表达式的返回String*/

      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
        case DIVISOR:
        case 55:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUL:
          t = jj_consume_token(MUL);
          break;
        case DIVISOR:
          t = jj_consume_token(DIVISOR);
          break;
        case 55:
          t = jj_consume_token(55);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        b = UnaryExpression();
      res = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(t.image, a, b, res);
      qtlist.addQTInfo(qt);
      a = res; /*将res 赋给a,满足a*b*c的情况，返回两个四元式，即让下一次调用时，a=T1*/

      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return res;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LRBRACKET:
        jj_consume_token(LRBRACKET);
        s = Expression();
        jj_consume_token(RRBRACKET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
        break;
      case IDENTIFIER:
        s = Identifier();
    if (!(varmap.Variablecontains(s)))
    {
      System.out.println("@ERR! The Variable," + s + ", has NOT been defined...");
    }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
        break;
      case INTEGER_LITERAL:
        s = Integer();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
        break;
      case FLOAT_LITERAL:
        s = Float();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return s;}
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Returnstatment() throws ParseException {
 /*@bgen(jjtree) Returnstatment */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      biaodashi();
      jj_consume_token(SEM);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String Float() throws ParseException {
 /*@bgen(jjtree) Float */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(FLOAT_LITERAL);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[49];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa000,0x322f6800,0x322f6800,0x322f6800,0x322f2800,0x0,0x200e2000,0x220e2000,0xe2000,0x20000080,0x20000080,0x0,0x0,0x0,0x0,0x20000080,0x20000080,0x0,0x0,0x0,0x20000080,0x20000080,0x0,0x0,0x20000080,0x20000080,0x0,0x20000080,0x0,0x0,0x0,0x1000,0x2000,0x20002000,0x20000000,0x322f6800,0x0,0x10210000,0x0,0x20400080,0x1000000,0x800000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x20000080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x30004,0x30004,0x30004,0x30000,0x30000,0x30000,0x30000,0x0,0x0,0x0,0x10,0x4010,0x4010,0x1,0x0,0x0,0x10,0x4010,0x4010,0x0,0x0,0x10,0x10,0x0,0x0,0x10,0x8040,0x34000,0x34000,0x30000,0x0,0x0,0x0,0x30000,0x30004,0x6,0x0,0x787000,0x8040,0x0,0x0,0x0,0x787000,0x500,0x500,0x800a00,0x800a00,0x8040,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 49; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 49; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
