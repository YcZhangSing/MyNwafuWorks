/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MyNewGrammar)
package shixi1;
import java.io.*;

public class MyNewGrammar
{
  public static void main(String args [])
  {
    System.out.println("Reading from file input...");
    //System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    String inputpath ="src/shixi1/testinput3";
    String outputpath ="src/shixi1/output";
    InputStream fin = null;
    FileWriter fw =null;
    try {
		fin =new FileInputStream(inputpath);
	} catch (FileNotFoundException e1) {
		// TODO 自动生成的 catch 块
		e1.printStackTrace();
	}
		try {
			fw = new FileWriter(outputpath, true);
		} catch (IOException e1) {
			// TODO 自动生成的 catch 块
			e1.printStackTrace();
		}
	PrintWriter pw = new PrintWriter(fw);
	pw.print(inputpath+"的词法分析结果：\n");
	pw.print("TOKEN\t"+"KIND\t"+"LOCATION\n");
	pw.flush();
    try
    {
      SimpleCharStream stream = new SimpleCharStream(fin);
      MyNewGrammarTokenManager mtk = new MyNewGrammarTokenManager(stream);
      Token token = mtk.getNextToken();
      while(token.kind != 0) {
		pw.print(token.image+"\t\t"+token.kind+"\t\t"+"("+token.beginLine+","+token.beginColumn+")\n");
		pw.flush();
        token = mtk.getNextToken();
      }
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
    System.out.println("Analysis done! Please check it in file output.");
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN:/*KERWORDS*/
{
	< IF : "if">
|   < ELSE : "else">
|   < INT : "int">
|   < RETURN : "return">
|   < VOID : "void">
|   < WHILE : "while">

 }

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN:/*SPARATER*/
{
  < COMMA:"," >
| < SEM : ";">
|   < LFBRACKET:"{" >
|   < RFBRACKET:"}" >
|   < LBRACKET:"[" >
|   < RBRACKET:"]" >
|   < LRBRACKET:"(" >
|   < RRBRACKET:")" >
}
TOKEN :/*OPERATOR*/
{
	< ADD:"+" >
| < MUL:"*" >
	| < MINUS:"-" >
	| < DIVISOR:"/" >
	| < LESSTHAN:"<" >
	| < GREATERTHAN:">" >
	| < EQUAL:"=" >
}
SimpleNode Start() :
{}
{
  Expression() ";"
  {
    return jjtThis;
  }
}

void Expression() :
{}
{
  AdditiveExpression()
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression()
  )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

void UnaryExpression() :
{}
{
  "(" Expression() ")"
| Identifier()
| Integer()
}

void Identifier() :
{}
{
  < IDENTIFIER >
}

void Integer() :
{}
{
  < INTEGER_LITERAL >
}
