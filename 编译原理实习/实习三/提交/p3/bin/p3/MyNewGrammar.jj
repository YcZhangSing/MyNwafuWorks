/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MyNewGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(MyNewGrammar)
package p3;
import Util.*;
import java.io.*;

public class MyNewGrammar/*@bgen(jjtree)*/implements MyNewGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTMyNewGrammarState jjtree = new JJTMyNewGrammarState();

/*@egen*/
  //\u5b9a\u4e49\u4e00\u4e2aQTList< >\u5217\u8868
  public QTList qtlist = new QTList();

  //\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\u5217\u8868
  public ArrayMap arrmap = new ArrayMap();

  public String printQTTable()
  {
    return qtlist.printQTTable();
  }

  public static void main(String args [])
  {
    System.out.println("Reading from file input...");
    String inputpath = "src/p3/testinput7";
    String outputpath = "src/p3/output";
    InputStream fin = null;
    FileWriter fw = null;
    try
    {
      fin = new FileInputStream(inputpath);
    }
    catch (FileNotFoundException e1)
    {
      // TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
      System.out.println("\uff01\uff01\uff01");
      e1.printStackTrace();
    }
    try
    {
      fw = new FileWriter(outputpath, true);
    }
    catch (IOException e1)
    {
      // TODO \u81ea\u52a8\u751f\u6210\u7684 catch \u5757
      System.out.println("\uff01\uff01\uff01");
      e1.printStackTrace();
    }
    PrintWriter pw = new PrintWriter(fw);
    pw.print(inputpath + "\u7684\u8bed\u6cd5\u5206\u6790\u7ed3\u679c\uff1a\n");
    pw.flush();
    MyNewGrammar YF = new MyNewGrammar(fin);
    try
    {
      System.out.println("1");
      SimpleNode n = YF.Start();
      System.out.println("2");
      String res = n.dump("");
      System.out.println("3");
      //
      System.out.println("\u8fd4\u56de\u7684\u7ed3\u679c:\n" + res);
      //
      res += "\n\u56db\u5143\u5f0f\u5982\u4e0b:\n";
      res += YF.printQTTable();
      pw.print(res);
      pw.flush();
      pw.close();
      fin.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println("\u51fa\u9519\u4e86\n" + e.getMessage());
    }
    System.out.println("Analysis done! Please check it in file output.");
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
  >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}

TOKEN : /*KERWORDS*/
{
  < IF : "if" >
| < ELSE : "else" >
| < INT : "int" >
| < RETURN : "return" >
| < VOID : "void" >
| < WHILE : "while" >
| < CHAR : "char" >
| < FLOAT : "float" >
| < DOUBLE : "double" >
| < MAIN : "main" >
| < FOR : "for" >
| < FEI : "!" >
| < HUO : "||" >
| < YU : "&&" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /*SPARATER*/
{
  < COMMA : "," >
| < SEM : ";" >
| < LFBRACKET : "{" >
| < RFBRACKET : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < LRBRACKET : "(" >
| < RRBRACKET : ")" >
}

TOKEN : /*OPERATOR*/
{
  < ADD : "+" >
| < MUL : "*" >
| < MINUS : "-" >
| < DIVISOR : "/" >
| < LESSTHAN : "<" >
| < GREATERTHAN : ">" >
| < EQUAL : "=" >
}

TOKEN : /* FLOAT */
{
  < FLOAT_LITERAL : 
    < DECIMAL_LITERAL > ("." < DECIMAL_LITERAL >)? 
  >
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (
    "int"
  | "void"
  )
  "main" "(" ")" "{"
  (
    SentenceBlock()
  )*
  "}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  //("int"|"void")"main""("")""{"(SentenceBlock())*"}"
}

void SentenceBlock() :
{/*@bgen(jjtree) SentenceBlock */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SentenceBlock */
  try {
/*@egen*/
  Sentence()
| Returnstatment()
| "{"
  (
    SentenceBlock()
  )*
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Sentence() :
{/*@bgen(jjtree) Sentence */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sentence */
  try {
/*@egen*/
  shunxu()
| tiaojianyuju()
| xunhuan()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void shunxu() :
{/*@bgen(jjtree) shunxu */
  SimpleNode jjtn000 = new SimpleNode(JJTSHUNXU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) shunxu */
  try {
/*@egen*/
  (
    shengming()
  |
    (
      LOOKAHEAD(2)
      fuzhi()
    | zizeng()
    )
  )
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void shengming() :
{/*@bgen(jjtree) shengming */
  SimpleNode jjtn000 = new SimpleNode(JJTSHENGMING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String arg1 = null;
  String result = null;
  String raw = ""+ 1;
  String col = ""+ 1;
}
{/*@bgen(jjtree) shengming */
  try {
/*@egen*/
  (
    "int"
  | "double"
  | "float"
  | "char"
  )
  result = Identifier() //int a=12; 
  (
    (
      "=" arg1 = biaodashi()
      {
        QTInfo qt0 = new QTInfo("=", arg1, "_", result);
        qtlist.addQTInfo(qt0);
      }
    )
  |
    (
      "["
      (
        col = Integer()
      | col = Identifier()
      )
      "]"
      (
        "["
        (
          raw = Integer()
        | raw = Identifier()
        )
        "]"
      )?
      {
        arrmap.createArray(result, raw, col);
      }
    )
  )?
  (
    "," result = Identifier()
    (
      (
        "=" arg1 = biaodashi()
        {
          QTInfo qt = new QTInfo("=", arg1, "_", result);
          qtlist.addQTInfo(qt);
        }
      )
    |
      (
        "["
        (
          col = Integer()
        | col = Identifier()
        )
        "]"
        (
          "["
          (
            raw = Integer()
          | raw = Identifier()
          )
          "]"
        )?
        {
          if(!arrmap.createArray(result, raw, col))
          {
            System.out.println("\u91cd\u590d\u5b9a\u4e49");
            throw new Exception();
          }
        }
      )
    )?
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void fuzhi() :
{/*@bgen(jjtree) fuzhi */
  SimpleNode jjtn000 = new SimpleNode(JJTFUZHI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String arg1 = null;
  String result = null;
  String Temp = null;
  String arrname = null;
  String T1 = null;
  String T2 = null;
  String T3 = null;
  String acol = ""+ 1;
  String araw = ""+ 1;
  String col = ""+ 1;
  String raw = ""+ 1;
}
{/*@bgen(jjtree) fuzhi */
  try {
/*@egen*/
  //(=,biaodashi,_,biaoshifu)
  //QTInfo(String operator, String arg1, String arg2, String result)
  result = Identifier()
  (
    "["
    (
      col = Integer()
    | col = Identifier()
    )
    "]"
    (
      "["
      (
        raw = Integer()
      | raw = Identifier()
      )
      "]"
    )?
    {
      System.out.println("\u5230\u6b64\uff01"+result);
    }
    "=" arg1 = biaodashi()
    {
      if (!arrmap.containsKey(result))
      {
        System.out.println("\u6570\u7ec4\u672a\u5b9a\u4e49");
        throw new NoSuchFieldException("\u6570\u7ec4\u672a\u5b9a\u4e49\uff01");
      }
      acol = arrmap.getcol(result);
      araw = arrmap.getraw(result); //\u83b7\u53d6\u6570\u7ec4\u7684\u5927\u5c0f\uff08\u8fd9\u91cc\u662f\u6a2a\u5411\u5b58\u50a8\u7684\u6570\u7ec4\uff09
      T1 = VariableNameGenerator.genVariableName();
      T2 = VariableNameGenerator.genVariableName();
      T3 = VariableNameGenerator.genVariableName();
      QTInfo qt1 = new QTInfo("*", col, acol, T1);
      QTInfo qt2 = new QTInfo("+", raw, T1, T1);
      Temp = String.valueOf(Integer.parseInt(acol) + 1);
      QTInfo qt3 = new QTInfo("-", result, Temp, T2);
      QTInfo qt4 = new QTInfo("[]=", arg1, "-", T2 + "[" + T1 + "]");
      qtlist.addQTInfo(qt1);
      qtlist.addQTInfo(qt2);
      qtlist.addQTInfo(qt3);
      qtlist.addQTInfo(qt4);
    }
  )?
  (
    (
      "="
      (
        LOOKAHEAD(2)
        ( //\u5c06\u6570\u7ec4\u7684\u503c\u8d4b\u7ed9\u6807\u8bc6\u7b26\u201c a = b[1][2]
          arrname = Identifier() 
          "["
          (
            col = Integer()
          | col = Identifier()
          )
          "]"
          (
            "["
            (
              raw = Integer()
            | raw = Identifier()
            )
            "]"
          )?
          {
            if (!arrmap.containsKey(arrname))
            {
              System.out.println("\u6570\u7ec4\u672a\u5b9a\u4e49");
              throw new NoSuchFieldException("\u6570\u7ec4\u672a\u5b9a\u4e49\uff01");
            }
            System.out.println("case 1");
            T1 = VariableNameGenerator.genVariableName();
            acol = arrmap.getcol(arrname);
            araw = arrmap.getraw(arrname); //\u83b7\u53d6\u6570\u7ec4\u7684\u5927\u5c0f\uff08\u8fd9\u91cc\u662f\u6a2a\u5411\u5b58\u50a8\u7684\u6570\u7ec4\uff09
            QTInfo qt1 = new QTInfo("*", col, acol, T1);
            T2 = VariableNameGenerator.genVariableName();
            T3 = VariableNameGenerator.genVariableName();
            QTInfo qt2 = new QTInfo("+", raw, T1, T1);
            Temp = String.valueOf(Integer.parseInt(acol) + 1);
            QTInfo qt3 = new QTInfo("-", arrname, Temp, T2);
            QTInfo qt4 = new QTInfo("=[]", T2 + "[" + T1 + "]", "-", T3);
            QTInfo qt5 = new QTInfo("=", T3, "-", result); //
            qtlist.addQTInfo(qt1);
            qtlist.addQTInfo(qt2);
            qtlist.addQTInfo(qt3);
            qtlist.addQTInfo(qt4);
            qtlist.addQTInfo(qt5);
          }
        )
      |
        (
          arg1 = biaodashi()
          {
            System.out.println("case 1");
            QTInfo qt = new QTInfo("=", arg1, "_", result);
            qtlist.addQTInfo(qt);
          }
        )
      )
    )
  |
    (
      "++"
      {
        /*
      	("+",i,1,T1)
      	("=",T1,_,i)
      */
        Temp = VariableNameGenerator.genVariableName();
        QTInfo qt01 = new QTInfo("+", result, "1", Temp);
        QTInfo qt02 = new QTInfo("=", Temp, "_", result);
        qtlist.addQTInfo(qt01);
        qtlist.addQTInfo(qt02);
      }
    )
  |
    (
      "--"
      {
        /*
      	("-",i,1,T1)
      	("=",T1,_,i)
      */
        Temp = VariableNameGenerator.genVariableName();
        QTInfo qt00 = new QTInfo("-", result, "1", Temp);
        QTInfo qt11 = new QTInfo("=", Temp, "_", result);
        qtlist.addQTInfo(qt00);
        qtlist.addQTInfo(qt11);
      }
    )
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void zizeng() :
{/*@bgen(jjtree) zizeng */
  SimpleNode jjtn000 = new SimpleNode(JJTZIZENG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String x = null;
  String Temp = null;
}
{/*@bgen(jjtree) zizeng */
  try {
/*@egen*/
  (
    "++" x = Identifier()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      /*
      	("+",i,1,T1)
      	("=",T1,_,i)
      */
      Temp = VariableNameGenerator.genVariableName();
      QTInfo qt01 = new QTInfo("+", x, "1", Temp);
      QTInfo qt02 = new QTInfo("=", Temp, "_", x);
      qtlist.addQTInfo(qt01);
      qtlist.addQTInfo(qt02);
    }
  )
|
  (
    "--" x = Identifier()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      /*
      	("-",i,1,T1)
      	("=",T1,_,i)
      */
      Temp = VariableNameGenerator.genVariableName();
      QTInfo qt0 = new QTInfo("-", x, "1", Temp);
      QTInfo qt1 = new QTInfo("=", Temp, "_", x);
      qtlist.addQTInfo(qt0);
      qtlist.addQTInfo(qt1);
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void tiaojianyuju() :
/*\u6761\u4ef6\u8bed\u53e5    if (E) S1 else S2  \u6216\u8005 if (E) S1
\u626b\u63cf\u5b8c\u53f3\u62ec\u53f7\u4e4b\u540e\u5c31\u53ef\u4ee5\u786e\u5b9a\u771f\u51fa\u53e3\uff1b
\u626b\u63cf\u5b8c\u53ef\u4ee5\u6682\u65f6\u786e\u5b9a\u5047\u51fa\u53e3
else\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65e0\u6761\u4ef6\u8df3\u8f6c\u8bed\u53e5
*/
{/*@bgen(jjtree) tiaojianyuju */
  SimpleNode jjtn000 = new SimpleNode(JJTTIAOJIANYUJU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv = null;
  Token t = null;
  int index = 0;
}
{/*@bgen(jjtree) tiaojianyuju */
  try {
/*@egen*/
  "if" "(" cv = Boolean() ")"
  {
    cv.backpatchTrueChain(QTInfo.size + 1);
  }
  SentenceBlock()
  (
    LOOKAHEAD(1) /*\u9632\u6b62if else \u5d4c\u5957\u5bfc\u81f4\u7684\u51b2\u7a81*/
    t = < ELSE >
    {
      QTInfo qt = new QTInfo("J", "-", "-", "-");
      qtlist.addQTInfo(qt);
      index = QTInfo.size;
      cv.backpatchFalseChain(index + 1);
    }
    (
      SentenceBlock()
      {
        qtlist.setResultbyIndex(index, QTInfo.size);
      }
    )
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (t == null)
    {
      cv.backpatchFalseChain(QTInfo.size + 1);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void xunhuan() :
{/*@bgen(jjtree) xunhuan */
  SimpleNode jjtn000 = new SimpleNode(JJTXUNHUAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int index = 0;
  ConditionValue cValue = new ConditionValue();
  String result = null;
  String arg1 = null;
  int indexE2 = 0;
  int indexE3 = 0;
}
{/*@bgen(jjtree) xunhuan */
  try {
/*@egen*/
  ( /*while\u5faa\u73af\u53ea\u4ea7\u751f\u4e00\u4e2a\u56db\u5143\u5f0f\u5373\u65e0\u6761\u4ef6\u8f6c\u79fb\u56db\u5143\u5f0f\uff0c\u81f3\u4e8e\u5faa\u73af\u4f53\u5185\u7684\u56db\u5143\u5f0f\uff0c\u4e0d\u7531while\u4ea7\u751f*/
    /*
		while (E) S1;
		\u771f\u51fa\u53e3\uff1aS1; \u5373\u626b\u63cf\u5b8c\u53f3\u62ec\u53f7\u540e\u4fbf\u77e5\u9053\u771f\u51fa\u53e3\u7684\u4f4d\u7f6e\u3002
		\u5047\u51fa\u53e3\uff1a\u65e0\u6761\u4ef6\u8f6c\u79fb\u4e4b\u540e
	*/
    "while" "("
    {
      index = QTInfo.size + 1; //\u8bb0\u5f55\u8fdb\u5165while\u5faa\u73af\u7684\u56db\u5143\u5f0f\u4f4d\u7f6e
    }
    cValue = Boolean() 
    ")" /*\u626b\u63cf\u5b8c\u53f3\u62ec\u53f7\uff0c\u4e0b\u4e00\u4e2a\u5c31\u662f\u5faa\u73af\u4f53\u4e86\uff0c\u5faa\u73af\u4f53\u7684\u7b2c\u4e00\u53e5\u4e5f\u5c31\u662fwhile\u8bed\u53e5\u7684\u771f\u51fa\u53e3\uff0c
  	\u6b64\u65f6\u5229\u7528Boolean()\u8bed\u53e5\u8fd4\u56de\u7684cvalue,\u56de\u586b\u771f\u51fa\u53e3\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5c31\u662fQTInfo.size+1*/
    {
      cValue.backpatchTrueChain(QTInfo.size + 1);
    }
    SentenceBlock()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    /*\u626b\u63cf\u5b8c\u5faa\u73af\u4f53\u8bed\u53e5\u5373SentenceBlock()\u4e4b\u540e\u5c31\u8be5\u751f\u6210while\u7684\u56db\u5143\u5f0f\uff0c\u8fd4\u56dewhile\u8bed\u53e5\u5f00\u59cb\u7684\u5730\u65b9\uff0c\u5373index\u56db\u5143\u5f0f*/
    {
      QTInfo qt = new QTInfo("j", "_", "_", index);
      qtlist.addQTInfo(qt);
      /*\u5047\u51fa\u53e3\u5728\u6b64\uff0cwhile\u6761\u4ef6\u4e3a\u5047\u540e\u5c31\u5e94\u8be5\u8df3\u51fawhile\u5faa\u73af\u4e86\uff0c\u6240\u4ee5\uff0c\u6b64\u65f6QTInfo.size+1\u5c31\u662f\u5047\u51fa\u53e3\u7684\u56db\u5143\u5f0f\u7f16\u53f7\u4e86*/
      cValue.backpatchFalseChain(QTInfo.size + 1);
    }
  )
|
  (
    /*
  For\u5faa\u73af\u7684\u5b9e\u73b0
  for(E1;E2;E3)
  {
    S1
  }
  	E2\u7684\u771f\u51fa\u53e3\u662fS1
  	\u5047\u51fa\u53e3\u662fS1+1
  	S1\u6267\u884c\u5b8c\u540e\u6267\u884cE3
  	E3\u65e0\u6761\u4ef6\u8df3\u8f6c\u5230E2
  */
    < FOR > 
    < LRBRACKET >
    /*E1*/
    (
      (
        ("int")? 
        result = Identifier() 
        "=" arg1 = biaodashi()
        {
          QTInfo qt0 = new QTInfo("=", arg1, "_", result);
          qtlist.addQTInfo(qt0);
        }
      )?
      ";"
    )
    /*E2*/
    {
      indexE2 = QTInfo.size + 1;
    }
    cValue = Boolean() 
    ";"
    /*E3
    	\u6267\u884c\u5b8c\u6b64\u8bed\u53e5\u4e4b\u540e\u8981\u8fdb\u884c\u4e00\u4e2a\u65e0\u6761\u4ef6\u8df3\u8f6c\uff0c\u8df3\u8f6c\u5230E2\u5224\u65adfor\u5faa\u73af\u662f\u5426\u4e3a\u771f
    	(j,_,_,indexE2)
    */
    {
      indexE3 = QTInfo.size + 1; //\u8bb0\u5f55E3\u7684\u4f4d\u7f6e
    }
    (
      zizeng()
    | fuzhi()
    )
    {
      //\u626b\u63cf\u5b8cE3\u8981\u8df3\u56deE2
      QTInfo qtE2 = new QTInfo("j", "_", "_", indexE2);
      qtlist.addQTInfo(qtE2);
    }
    < RRBRACKET >
    {
      index = QTInfo.size + 1;
    }
    /*S1*/
    (
      (
        "{"
        { /*\u626b\u63cf\u5b8c { \u5c31\u77e5\u9053for\u5faa\u73af\u7684\u771f\u51fa\u53e3\u5728\u4e0b\u4e00\u53e5\u4e86\uff0c\u56de\u586bbiaodashi\u7684cValue\u7684\u771f\u51fa\u53e3*/
          cValue.backpatchTrueChain(QTInfo.size + 1);
        }
        (
          SentenceBlock()
        )?
        { /*\u626b\u63cf\u5b8cSenten\u4e4b\u540e\u8981\u4ea7\u751f\u65e0\u6761\u4ef6\u8df3\u8f6c\u8bed\u53e5\uff0c\u8df3\u8f6c\u5230E3\u5904*/
          QTInfo qtE3 = new QTInfo("j", "_", "_", indexE3);
          qtlist.addQTInfo(qtE3);
        }
        "}"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { /*\u626b\u63cf\u5b8c }\u5c31\u77e5\u9053for\u5faa\u73af\u7684\u5047\u51fa\u53e3\u5728\u4e0b\u4e00\u53e5\u4e86\uff0c\u56de\u586bbiaodashi\u7684cValue\u7684\u5047\u51fa\u53e3*/
          cValue.backpatchFalseChain(QTInfo.size + 1);
        }
      )
    |
      (
        ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
        { /*\u626b\u63cf\u5b8c \uff1b \u5c31\u77e5\u9053for\u5faa\u73af\u7684\u771f\u51fa\u53e3\u5728E3\u4e86\uff0c\u56de\u586bbiaodashi\u7684cValue\u7684\u771f\u51fa\u53e3*/
          cValue.backpatchTrueChain(indexE3);
          cValue.backpatchFalseChain(QTInfo.size + 1);
        }
      )
    )
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
\u5e03\u5c14\u8868\u8fbe\u5f0f\u7684\u5b9e\u73b0
\u5e03\u5c14\u8868\u8fbe\u5f0f\u4e2d\u6709\u56db\u79cd\u8fd0\u7b97\u7b26\uff0c\u5173\u7cfb\u7b26\u3001\u4e0e\u3001\u6216\u3001\u975e
> < >= <= != == && || !
\u4e3a\u4e86\u5b9e\u73b0\u4e0a\u8ff0\u590d\u6742\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u7684\u7ffb\u8bd1\uff0c\u5b9a\u4e49\u4e86\u4e09\u4e2a\u8bed\u6cd5\u8bed\u4e49\u7a0b\u5e8f
BaiscBoolean():\u6700\u7b80\u5355\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\u5373\u5305\u542b\u975e\u64cd\u4f5c\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f
YuBoolean():\u4e0e&&\u7ed3\u5408\u8d77\u6765\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u7531BasicBoolen()+&&\u7ec4\u6210
Boolean():\u6216||\u7ed3\u5408\u8d77\u6765\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f\uff0c\u7531YuBoolean()+||\u7ec4\u6210
\u56e0\u4e3a\u8fd0\u7b97\u4f18\u5148\u7ea7 rop >! >&& >||
\u6240\u4ee5Boolean()\u5373\u662f\u6700\u540e\u53ef\u4ee5\u5339\u914d\u5e03\u5c14\u8868\u8fbe\u5f0f\u662f\u8bed\u6cd5
*/

ConditionValue BasicBoolean() :
{/*@bgen(jjtree) BasicBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBASICBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv = new ConditionValue();
  ConditionValue cvt = null;
  Token test = null;
}
{/*@bgen(jjtree) BasicBoolean */
  try {
/*@egen*/
  (
    (
      test = < FEI >
      (
        < LRBRACKET > 
        cvt = tiaojian() 
        < RRBRACKET >
      )
    )
  |
    (
      cvt = tiaojian()
    )
  )
  {
    if (test == null)
    {
      cv.mergeFalse(cvt);
      cv.mergeTrue(cvt);
    }
    else //\u6709 \uff01 \u53f7\uff0c\u8981\u91c7\u7528\u4e0d\u540c\u7684\u64cd\u4f5cmerge\u771f\u5047\u4e32
    {
      cv.FEImerge(cvt);
    }
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue YuBoolean() :
{/*@bgen(jjtree) YuBoolean */
  SimpleNode jjtn000 = new SimpleNode(JJTYUBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv3 = new ConditionValue();
  ConditionValue cv2 = null;
  ConditionValue cv1 = null;
  Token test = null;
}
{/*@bgen(jjtree) YuBoolean */
  try {
/*@egen*/
  cv1 = BasicBoolean()
  {
    cv3.mergeFalse(cv1); //cv1\u7684\u5047\u51fa\u53e3\u5373cv3\u7684\u5047\u51fa\u53e3
  }
  (
    test = < YU >
    {
      cv1.backpatchTrueChain(QTInfo.size + 1); //E&&M \u5f53E\u4e3a\u771f\u65f6\uff0c\u8981\u54e6\u7ee7\u7eed\u8ba1\u7b97M\u7684\u771f\u5047\uff0c\u6240\u4ee5E\u7684\u771f\u51fa\u53e3\u5728M\u5904
    }
    cv2 = YuBoolean()
    {
      cv3.mergeFalse(cv2);
    }
  )?
  {
    if (cv2 == null) //\u5982\u679c\u6ca1\u6709YU
    {
      cv3 = cv1; //\u76f4\u63a5\u8fd4\u56deCV1\u5373\u53ef
    }
    else
    {
      cv3.mergeTrue(cv2); //cv2\u7684\u771f\u94femerge\u5230cv3\u4e2d
    }
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv3;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue Boolean() :
{/*@bgen(jjtree) Boolean */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ConditionValue cv1 = null; //\u7b2c\u4e00\u4e2a\u7b80\u5355\u5e03\u5c14\u8868\u8fbe\u5f0f
  ConditionValue cv2 = null; //&&\u53f7\u540e\u9762\u7684\u5e03\u5c14\u8868\u8fbe\u5f0f  
  ConditionValue cv3 = new ConditionValue(); //\u6574\u4e2aYuBoolean\u8868\u8fbe\u5f0f\u7684condationvalue\u7684\u503c
  Token test = null;
}
{/*@bgen(jjtree) Boolean */
  try {
/*@egen*/
  cv1 = YuBoolean()
  {
    cv3.mergeTrue(cv1);
  }
  (
    test = < HUO >
    {
      cv1.backpatchFalseChain(QTInfo.size + 1);
    }
    cv2 = Boolean()
    {
      cv3.mergeTrue(cv2);
    }
  )?
  {
    if (test == null)
    {
      cv3 = cv1;
    }
    else
    {
      cv3.mergeFalse(cv2);
    }
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cv3;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ConditionValue tiaojian() : /*\u6761\u4ef6\u8868\u8fbe\u5f0f\uff1aa<b-- >(<j<,a,b,T) (j<,-,-,F) \u771f\u5047\u51fa\u53e3\u56db\u5143\u5f0f*/
{/*@bgen(jjtree) tiaojian */
  SimpleNode jjtn000 = new SimpleNode(JJTTIAOJIAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String e1 = null;
  String e2 = null;
  String r = null;
  ConditionValue cValue = new ConditionValue();
}
{/*@bgen(jjtree) tiaojian */
  try {
/*@egen*/
  e1 = biaodashi()
  (
    r = guanxifu() e2 = biaodashi()
  )?
  {
    if (r == null) /*\u53ea\u6709\u8868\u8fbe\u5f0f(jnz,e1,-,T)*/
    {
      QTInfo qt1 = new QTInfo("jnz", e1, "_", "T");
      qtlist.addQTInfo(qt1);
      cValue.mergeTrue(qt1);
    }
    else /*(j+r,e1,e2,T)*/
    {
      QTInfo qt = new QTInfo("j" + r, e1, e2, "T");
      qtlist.addQTInfo(qt);
      cValue.mergeTrue(qt);
    }
    /*\u65e0\u8bba\u5982\u4f55\u90fd\u6709\u4e00\u4e2a\u5047\u56db\u5143\u5f0f(j,-,-,F)*/
    QTInfo qt = new QTInfo("j", "_", "_", "F");
    qtlist.addQTInfo(qt);
    cValue.mergeFalse(qt);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return cValue; /*\u6761\u4ef6\u8bed\u53e5\u8981\u8fd4\u56de\u4e00\u4e2a\u6761\u4ef6\u8bed\u53e5\u7684\u503cConditionValue*/
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

//ConditionValue tiaojian() :
//{}
//{
//  biaodashi() guanxifu() biaodashi()
//}
String biaodashi() :
{/*@bgen(jjtree) biaodashi */
  SimpleNode jjtn000 = new SimpleNode(JJTBIAODASHI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s = null;
}
{/*@bgen(jjtree) biaodashi */
  try {
/*@egen*/
  s = Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String guanxifu() :
{/*@bgen(jjtree) guanxifu */
  SimpleNode jjtn000 = new SimpleNode(JJTGUANXIFU);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) guanxifu */
  try {
/*@egen*/
  (
    t = "<"
  | t = ">"
  | t = "="
  | t = "<="
  | t = ">="
  | t = "=="
  | t = "!="
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Expression() :
{/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s = null;
}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  s = AdditiveExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String AdditiveExpression() : //\u9644\u52a0\u8868\u8fbe\u5f0f
{/*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String a = null;
  String b = null;
  String res = null;
  Token t = null;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  a = MultiplicativeExpression() /*\u52a0\u6cd5\u8868\u8fbe\u5f0f    a+b+c -- >(+,a,b,T1) (+,T1,c,T2)*/
  {
    res = a;
  }
  (
    (
      t = "+"
    | t = "-"
    )
    b = MultiplicativeExpression()
    {
      res = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(t.image, a, b, res);
      qtlist.addQTInfo(qt);
      a = res;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return res;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String MultiplicativeExpression() : //\u4e58\u6cd5\u8868\u8fbe\u5f0f a*b*c-- >(*,a,b,T1)(*,T1,c,T2)
//QTInfo(String operator, String arg1, String arg2, String result)
{/*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String a = null;
  String b = null;
  String res = null;
  Token t = null;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  a = UnaryExpression()
  {
    res = a; /*\u5982\u679c\u53ea\u6709UnaryExpression()\u800c\u6ca1\u6709\u540e\u9762\u7684()*,\u8fd9\u65f6\u5019\u8fd4\u56de\u7684String\u503c\u662f\u5355\u76ee\u8fd0\u7b97\u8868\u8fbe\u5f0f\u7684\u8fd4\u56deString*/
  }
  (
    (
      t = "*"
    | t = "/"
    | t = "%"
    )
    b = UnaryExpression()
    {
      res = VariableNameGenerator.genVariableName();
      QTInfo qt = new QTInfo(t.image, a, b, res);
      qtlist.addQTInfo(qt);
      a = res; /*\u5c06res \u8d4b\u7ed9a,\u6ee1\u8db3a*b*c\u7684\u60c5\u51b5\uff0c\u8fd4\u56de\u4e24\u4e2a\u56db\u5143\u5f0f\uff0c\u5373\u8ba9\u4e0b\u4e00\u6b21\u8c03\u7528\u65f6\uff0ca=T1*/
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return res;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String UnaryExpression() : //\u4e00\u5143\u8868\u8fbe\u5f0f
{/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s = null;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  "(" s = Expression() ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }
| s = Identifier()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }
| s = Integer()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }
| s = Float()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return s;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Identifier() :
{/*@bgen(jjtree) Identifier */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Identifier */
  try {
/*@egen*/
  t = < IDENTIFIER >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Integer() :
{/*@bgen(jjtree) Integer */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Returnstatment() :
{/*@bgen(jjtree) Returnstatment */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTATMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Returnstatment */
  try {
/*@egen*/
  < RETURN > biaodashi() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String Float() :
{/*@bgen(jjtree) Float */
  SimpleNode jjtn000 = new SimpleNode(JJTFLOAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) Float */
  try {
/*@egen*/
  t = < FLOAT_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return t.image;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
